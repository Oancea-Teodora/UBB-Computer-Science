     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf           ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 00000000                    a dd 0
    17 00000004 00000000                    b dd 0
    18 00000008 2564000000000000            f dd '%d',0
    19 00000010 0000                        rezultat dw 0
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ;Sa se citeasca de la tastatura doua numere a si b (in baza 10) si sa se calculeze: (a+b) / (a-b). Catul impartirii se va salva in memorie in variabila "rezultat" (definita in segmentul de date). Valorile se
    24 00000000 68[00000000]                    push dword a
    25 00000005 68[08000000]                    push dword f 
    26 0000000A FF15[00000000]                  call [scanf]
    27 00000010 83C408                          add esp, 2*4
    28                                          
    29 00000013 68[04000000]                    push dword b
    30 00000018 68[08000000]                    push dword f 
    31 0000001D FF15[00000000]                  call [scanf]
    32 00000023 83C408                          add esp, 2*4
    33                                          
    34 00000026 A1[00000000]                    mov eax, [a]
    35 0000002B 8B1D[04000000]                  mov ebx, [b]
    36 00000031 01D8                            add eax, ebx
    37                                          
    38 00000033 8B0D[00000000]                  mov ecx, [a]
    39 00000039 29D9                            sub ecx, ebx
    40                                          
    41 0000003B BA00000000                      mov edx, 0
    42 00000040 F7F9                            idiv ecx
    43 00000042 66A3[10000000]                  mov [rezultat], ax
    44                                          
    45                                          ; exit(0)
    46 00000048 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 0000004A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
